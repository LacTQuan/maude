fmod NAT+INF is
  pr NAT .
  sorts Inf NatInf .
  subsorts Nat Inf < NatInf .
  op oo : -> Inf [ctor] .
  var N : Nat .
  eq N < oo = true .
  eq oo < N = false .
  eq oo < oo = false .
  eq N > oo = false .
  eq oo > N = true .
  eq oo > oo = false .
  eq oo + N = oo .
  eq oo + oo = oo .
endfm

fmod NID is
  pr NAT .
  sort NId .
  ops n0 n1 n2 n3 n4 n5 : -> NId [ctor] .
  op goal? : NId -> Bool .
  var NI : NId .
  eq goal?(n3) = true .
  eq goal?(NI) = false [owise] .
endfm

fmod NID-QUEUE is
  pr NID .
  sort NIdQueue .
  subsort NId < NIdQueue .
  op enidq : -> NIdQueue [ctor] .
  op _|_ : NIdQueue NIdQueue -> NIdQueue [ctor assoc id: enidq] .
endfm

fmod LIST {D :: TRIV} is
  sort List{D} .
  subsort D$Elt < List{D} .
  op nil : -> List{D} [ctor] .
  op _-> _ : List{D} List{D} -> List{D} [ctor assoc id: nil] .
endfm