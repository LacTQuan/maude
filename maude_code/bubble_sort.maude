mod SWAPPING{X :: DEFAULT} is
    protecting ARRAY{Nat, X} .
    vars I J : Nat .
    vars V W : X$Elt .
    var AR : Array{Nat, X} .
    rl [swap] : J |-> V ; I |-> W => J |-> W ; I |-> V .
    op maxIndex : Array{Nat, X} ~> Nat .
    eq maxIndex(empty) = 0 .
    eq maxIndex(I |-> V ; AR) = if maxIndex(AR) < I then I else maxIndex(AR) fi .
endm

view DEFAULT+ from DEFAULT to STRICT-TOTAL-ORDER + DEFAULT is
endv

mod BUBBLE-SORTING{X :: STRICT-TOTAL-ORDER + DEFAULT} is
    protecting ARRAY{Nat, X} .
    protecting SWAPPING{DEFAULT+}{X} .

    vars I J : Nat .
    vars V W : X$Elt .
    var AR : Array{Nat, X} .

    op bubbleSort : Array{Nat, X} ~> Array{Nat, X} .

    eq bubbleSort(empty) = empty .
    eq bubbleSort(I |-> V) = I |-> V .

    sd bubbleSort := try(xmatch I |-> V ; J |-> W ; AR s.t. I < J and V > W ;
                         swap(I, J) ;
                         bubbleSort)
                      else bubbleSortTail .

    strat bubbleSortTail := try(match AR s.t. I <= maxIndex(AR) ;
                                bubbleSort) .

    rl [swap] : J |-> V ; I |-> W => J |-> W ; I |-> V .

endm
view Int<0 from STRICT-TOTAL-ORDER + DEFAULT to INT is
    sort Elt to Int .
endv
smod BUBBLE-SORT-INT is
    protecting BUBBLE-SORTING{Int<0} .
endsm
