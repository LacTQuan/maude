mod SWAPPING{X :: DEFAULT} is
    protecting ARRAY{Nat, X} .
    vars I J : Nat .
    vars V W : X$Elt .
    var AR : Array{Nat, X} .
    rl [swap] : J |-> V ; I |-> W => J |-> W ; I |-> V .
    op maxIndex : Array{Nat, X} ~> Nat .
    eq maxIndex(empty) = 0 .
    eq maxIndex(I |-> V ; AR) = if maxIndex(AR) < I then I else maxIndex(AR) fi .
endm

view DEFAULT+ from DEFAULT to STRICT-TOTAL-ORDER + DEFAULT is
endv

smod INSERTION-SORT{X :: STRICT-TOTAL-ORDER + DEFAULT} is
    protecting SWAPPING{DEFAULT+}{X} * (
        sort Array{Nat, DEFAULT+}{X} to NatArray{X}
    ) .

    strat swap : Nat Nat @ NatArray{X} .
    strats insert insort : Nat @ NatArray{X} .

    vars X Y J I : Nat .
    vars V W : X$Elt .
    var AR : NatArray{X} .

    sd insort(Y) := try(match AR s.t. Y <= maxIndex(AR) ;
                        insert(Y) ;
                        insort(Y + 1)) .

    sd insert(1) := idle [label base-case] .
    csd insert(s(X)) := try(xmatch X |-> V ; s(X) |-> W s.t. W < V ;
                            swap(X, s(X)) ;
                            insert(X))
                        if X > 0 [label recursive-case] .
                        
    sd swap(X, Y) := swap[J <- X, I <- Y] .
endsm

view Int<0 from STRICT-TOTAL-ORDER + DEFAULT to INT is
    sort Elt to Int .
endv

smod INSERTION-SORT-INT is
    protecting INSERTION-SORT{Int<0} .
endsm