coverage:
  all_nodes: 0
  covered_nodes: 0
mutation_score: 44.44444444444444
mutations:
- exception_traceback: null
  killer: null
  module: &id001 !!python/module:app ''
  mutations:
  - lineno: 22
    operator: AOR
  number: 1
  status: survived
  tests_run: 16
  time: 0.05258488655090332
- exception_traceback: null
  killer: null
  module: *id001
  mutations:
  - lineno: 50
    operator: AOR
  number: 2
  status: survived
  tests_run: 16
  time: 0.05644679069519043
- exception_traceback: null
  killer: null
  module: *id001
  mutations:
  - lineno: 102
    operator: BCR
  number: 3
  status: survived
  tests_run: 16
  time: 0.055663347244262695
- exception_traceback: "def test_simple_path():\n        \"\"\"\n        Test a simple\
    \ 5x5 grid with no obstacles.\n        The start is at the top\u2010left and the\
    \ goal at the bottom\u2010right.\n        The algorithm should find a path.\n\
    \        \"\"\"\n        n = 5\n        grid = [[0 for _ in range(n)] for _ in\
    \ range(n)]\n        start = Node(0, 0)\n        goal = Node(4, 4)\n        start.id\
    \ = 0\n        start.pid = 0\n        astar = AStar(grid)\n        found, path\
    \ = astar.plan(start, goal)\n>       assert found is True, \"A path should be\
    \ found in an open grid\"\nE       AssertionError: A path should be found in an\
    \ open grid\n\ntest/test_app.py:49: AssertionError"
  killer: test/test_app.py::test_simple_path
  module: *id001
  mutations:
  - lineno: 95
    operator: COI
  number: 4
  status: killed
  tests_run: 2
  time: 0.06473946571350098
- exception_traceback: "def test_simple_path():\n        \"\"\"\n        Test a simple\
    \ 5x5 grid with no obstacles.\n        The start is at the top\u2010left and the\
    \ goal at the bottom\u2010right.\n        The algorithm should find a path.\n\
    \        \"\"\"\n        n = 5\n        grid = [[0 for _ in range(n)] for _ in\
    \ range(n)]\n        start = Node(0, 0)\n        goal = Node(4, 4)\n        start.id\
    \ = 0\n        start.pid = 0\n        astar = AStar(grid)\n>       found, path\
    \ = astar.plan(start, goal)\n\ntest/test_app.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <app.AStar\
    \ object at 0x7fae0c8d5990>\nstart = Node(x=0, y=0, id=0, pid=0, h_cost=0)\ngoal\
    \ = Node(x=4, y=4, id=0, pid=0, h_cost=0)\n\n>   ???\nE   IndexError: list index\
    \ out of range\n\napp:105: IndexError"
  killer: test/test_app.py::test_simple_path
  module: *id001
  mutations:
  - lineno: 103
    operator: COI
  number: 5
  status: killed
  tests_run: 2
  time: 0.06332564353942871
- exception_traceback: "def test_start_equals_goal():\n        \"\"\"\n        Test\
    \ the trivial case where the start and goal are the same.\n        The expected\
    \ result is an immediate success with a path containing only the start.\n    \
    \    \"\"\"\n        grid = [\n            [0, 0],\n            [0, 0]\n     \
    \   ]\n        start = Node(0, 0)\n        goal = Node(0, 0)\n        # Set the\
    \ start node's id and parent id.\n        start.id = 0\n        start.pid = 0\n\
    \        astar = AStar(grid)\n        found, path = astar.plan(start, goal)\n\
    \        assert found is True, \"Path should be found when start equals goal\"\
    \n        # The path should consist of only one node (start).\n>       assert\
    \ len(path) == 1\nE       AssertionError\n\ntest/test_app.py:32: AssertionError"
  killer: test/test_app.py::test_start_equals_goal
  module: *id001
  mutations:
  - lineno: 123
    operator: COI
  number: 6
  status: killed
  tests_run: 1
  time: 0.07316422462463379
- exception_traceback: "def test_simple_path():\n        \"\"\"\n        Test a simple\
    \ 5x5 grid with no obstacles.\n        The start is at the top\u2010left and the\
    \ goal at the bottom\u2010right.\n        The algorithm should find a path.\n\
    \        \"\"\"\n        n = 5\n        grid = [[0 for _ in range(n)] for _ in\
    \ range(n)]\n        start = Node(0, 0)\n        goal = Node(4, 4)\n        start.id\
    \ = 0\n        start.pid = 0\n        astar = AStar(grid)\n>       found, path\
    \ = astar.plan(start, goal)\n\ntest/test_app.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <app.AStar\
    \ object at 0x7fae0c68cc10>\nstart = Node(x=0, y=0, id=0, pid=0, h_cost=0)\ngoal\
    \ = Node(x=4, y=4, id=0, pid=0, h_cost=0)\n\n>   ???\nE   IndexError: list index\
    \ out of range\n\napp:105: IndexError"
  killer: test/test_app.py::test_simple_path
  module: *id001
  mutations:
  - lineno: 54
    operator: LCR
  number: 7
  status: killed
  tests_run: 2
  time: 0.07656240463256836
- exception_traceback: null
  killer: null
  module: *id001
  mutations:
  - lineno: 27
    operator: ROR
  number: 8
  status: survived
  tests_run: 16
  time: 0.05747532844543457
- exception_traceback: null
  killer: null
  module: *id001
  mutations:
  - lineno: 169
    operator: ROR
  number: 9
  status: survived
  tests_run: 16
  time: 0.05699443817138672
number_of_tests: 16
targets:
- src
tests:
- name: test_app
  target: null
  time: 0.11959314346313477
- name: conftest
  target: null
  time: 0.03418326377868652
time_stats:
  create_mutant_module: 0.014369964599609375
  create_target_ast: 0.0073277950286865234
  mutate_module: 1.968862771987915
  run_tests_with_mutant: 0.560570478439331
total_time: 2.1274242401123047
