coverage:
  all_nodes: 0
  covered_nodes: 0
mutation_score: 100.0
mutations:
- exception_traceback: "def test_simple_path():\n        \"\"\"\n        Test a simple\
    \ 5x5 grid with no obstacles.\n        The start is at the top\u2010left and the\
    \ goal at the bottom\u2010right.\n        The algorithm should find a path.\n\
    \        \"\"\"\n        n = 5\n        grid = [[0 for _ in range(n)] for _ in\
    \ range(n)]\n        start = Node(0, 0)\n        goal = Node(4, 4)\n        start.id\
    \ = 0\n        start.pid = 0\n        astar = AStar(grid)\n        found, path\
    \ = astar.plan(start, goal)\n>       assert found is True, \"A path should be\
    \ found in an open grid\"\nE       AssertionError: A path should be found in an\
    \ open grid\n\ntest/test_app.py:49: AssertionError"
  killer: test/test_app.py::test_simple_path
  module: &id001 !!python/module:app ''
  mutations:
  - lineno: 95
    operator: COI
  number: 1
  status: killed
  tests_run: 2
  time: 0.07425069808959961
- exception_traceback: "def test_start_equals_goal():\n        \"\"\"\n        Test\
    \ the trivial case where the start and goal are the same.\n        The expected\
    \ result is an immediate success with a path containing only the start.\n    \
    \    \"\"\"\n        grid = [\n            [0, 0],\n            [0, 0]\n     \
    \   ]\n        start = Node(0, 0)\n        goal = Node(0, 0)\n        # Set the\
    \ start node's id and parent id.\n        start.id = 0\n        start.pid = 0\n\
    \        astar = AStar(grid)\n        found, path = astar.plan(start, goal)\n\
    \        assert found is True, \"Path should be found when start equals goal\"\
    \n        # The path should consist of only one node (start).\n>       assert\
    \ len(path) == 1\nE       AssertionError\n\ntest/test_app.py:32: AssertionError"
  killer: test/test_app.py::test_start_equals_goal
  module: *id001
  mutations:
  - lineno: 120
    operator: COI
  number: 2
  status: killed
  tests_run: 1
  time: 0.06432723999023438
- exception_traceback: "def test_start_equals_goal():\n        \"\"\"\n        Test\
    \ the trivial case where the start and goal are the same.\n        The expected\
    \ result is an immediate success with a path containing only the start.\n    \
    \    \"\"\"\n        grid = [\n            [0, 0],\n            [0, 0]\n     \
    \   ]\n        start = Node(0, 0)\n        goal = Node(0, 0)\n        # Set the\
    \ start node's id and parent id.\n        start.id = 0\n        start.pid = 0\n\
    \        astar = AStar(grid)\n>       found, path = astar.plan(start, goal)\n\n\
    test/test_app.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <app.AStar object at 0x7f582d3c18d0>\nstart\
    \ = Node(x=0, y=0, id=0, pid=0, h_cost=0)\ngoal = Node(x=0, y=0, id=0, pid=0,\
    \ h_cost=0)\n\n>   ???\nE   AttributeError: 'AStar' object has no attribute 'original_grid'\n\
    \napp:71: AttributeError"
  killer: test/test_app.py::test_start_equals_goal
  module: *id001
  mutations:
  - lineno: 61
    operator: SCD
  number: 3
  status: killed
  tests_run: 1
  time: 0.07329845428466797
number_of_tests: 16
targets:
- src
tests:
- name: test_app
  target: null
  time: 0.10998368263244629
- name: conftest
  target: null
  time: 0.030017852783203125
time_stats:
  create_mutant_module: 0.004569292068481445
  create_target_ast: 0.005430936813354492
  mutate_module: 0.8815186023712158
  run_tests_with_mutant: 0.21293210983276367
total_time: 1.0260522365570068
